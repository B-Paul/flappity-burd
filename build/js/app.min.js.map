{"version":3,"sources":["node_modules/browser-pack/_prelude.js","site/js/components/collisions/circle.js","app.min.js","site/js/components/collisions/rectangle.js","site/js/components/graphics/altitude-limit.js","site/js/components/graphics/pipe.js","site/js/components/graphics/player.js","site/js/components/physics/physics.js","site/js/components/sound/sound.js","site/js/entities/altitude-limit.js","site/js/entities/pipe.js","site/js/entities/player.js","site/js/flappy-trump.js","site/js/helpers.js","site/js/main.js","site/js/systems/collisions.js","site/js/systems/graphics.js","site/js/systems/input.js","site/js/systems/obstacles.js","site/js/systems/physics.js","site/js/systems/ui.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","clamp","CircleCollisionComponent","entity","radius","this","size","x","y","type","prototype","collidesWith","components","collisions","collideCircle","collideRect","positionA","physics","position","positionB","radiusA","radiusB","diffX","diffY","distanceSquared","Math","pow","bothRadii","bothRadiiSquared","sizeB","halfWidthB","halfHeightB","rightB","leftB","topB","bottomB","closestX","closestY","radiusSquared","../../helpers",2,"RectCollisionComponent","sizeA","halfWidthA","halfHeightA","totalWidth","totalHeight","leftA","rightA","bottomA","topA","leftMost","min","rightMost","max","bottomMost","topMost","overlapX","overlapY",3,"AltLimitGraphicsComponent","draw","context","width","height","scrollOffset","time","period","scrollBands","ceil","save","translate","fillStyle","fillRect","restore",4,"PipeGraphicsComponent","image","Image","src","attachT","attach","drawImage",5,"PlayerGraphicsComponent","_this","imgAspectRatio","addEventListener","naturalWidth","naturalHeight","rotate","velocity","scale",6,"PhysicsComponent","acceleration","update","delta",7,"SoundComponent","sounds","reduce","fname","Audio","load","playSound","play","flapSound","scoreSound","dieSound","resetSound",8,"AltitudeLimit","yPosition","graphics","../components/collisions/rectangle","../components/graphics/altitude-limit","../components/physics/physics",9,"Pipe","startX","passCb","sound","bind","apply","arguments","../components/graphics/pipe","../components/sound/sound",10,"Player","reset","start","flap","die","../components/collisions/circle","../components/graphics/player",11,"GraphicsSystem","PhysicsSystem","InputSystem","ObstacleSystem","UISystem","FlappyTrump","canvas","player","entities","input","obstacles","ui","onPassObstacle","bumpScore","onCollision","pause","started","onReady","run","_this2","onStartGame","isReady","./entities/player","./systems/graphics","./systems/input","./systems/obstacles","./systems/physics","./systems/ui",12,"_slicedToArray","sliceIterator","arr","_arr","_n","_d","_e","undefined","_s","_i","Symbol","iterator","next","done","push","value","err","Array","isArray","Object","TypeError","h","low","high","subtract","b","srcRange","dstRange","_srcRange$sort","sort","_srcRange$sort2","srcMin","srcMax","_dstRange$sort","_dstRange$sort2","dstMin","dstMax","srcSize","dstSize",13,"document","getElementById","app","./flappy-trump",14,"CollisionSystem","tick","entityA","j","entityB",15,"global","getContext","recur","requestAnimationFrame","cb","offsetWith","offsetHeight","offsetWidth","forEach","ent","createLinearGradient","addColorStop","self","window","../entities/altitude-limit",16,"onClick","onTouchStart","onTouchEnd","onTouchMove","onTouchCancel","evt","preventDefault","touching",17,"ground","ceiling","intvl","splice","setInterval","clearInterval","aspectRatio","random","gap","height1","height2","pass","../entities/pipe","../helpers",18,"./collisions",19,"highScore","localStorage","getItem","endingSplashElt","finalScoreElt","highScoreElt","readyButton","readySplashElt","scoreElt","onclick","ready","style","display","score","textContent","setItem","toString"],"mappings":"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","file":"app.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\n\n// function to lock a number between a minimum and maximum value.\nvar clamp = require('../../helpers').clamp;\n\n\n/**\n * Object to represent a circular area and check if another entity is inside.\n *\n * Other code should use the `collidesWith()` method to test for collisions.\n *\n * @class\n * @param {*}      entity the entity owning this component\n * @param {number} radius radius of the collision area\n */\nvar CircleCollisionComponent\n  = function CircleCollisionComponent(entity, radius) {\n    this.entity = entity;\n    this.radius = radius;\n    this.size = { x: radius, y: radius };\n    this.type = 'circle';\n  };\n\nCircleCollisionComponent.prototype.collidesWith = function (entity) {\n  // `entity` will have a counterpart collision component similar to this one.\n  // dispatch to more specific functions for collision based on the type of that\n  // other component.\n  if (entity.components.collisions.type === 'circle') {\n    return this.collideCircle(entity);\n  }\n  else if (entity.components.collisions.type === 'rect') {\n    return this.collideRect(entity);\n  }\n  return false;\n};\n\nCircleCollisionComponent.prototype.collideCircle = function (entity) {\n  var positionA = this.entity.components.physics.position,\n      positionB = entity.components.physics.position;\n\n  var radiusA = this.radius,\n      radiusB = entity.components.collisions.radius;\n\n  var diffX = positionA.x - positionB.x;\n  var diffY = positionA.y - positionB.y;\n\n  // Square of the distance between this component's center and the center of\n  // the `entity`\n  var distanceSquared = Math.pow(diffX, 2) + Math.pow(diffY, 2);\n\n  // Minimum distance between two circles that do not overlap is the total of\n  // both radii.\n  var bothRadii = radiusA + radiusB;\n  var bothRadiiSquared = Math.pow(bothRadii, 2);\n\n  // if [current distance]^2 is less than [minimum distance]^2 there must be\n  // overlap.\n  return distanceSquared < bothRadiiSquared;\n};\n\nCircleCollisionComponent.prototype.collideRect = function (entity) {\n  var positionA = this.entity.components.physics.position;\n  var positionB = entity.components.physics.position;\n  var sizeB = entity.components.collisions.size;\n\n  var halfWidthB = sizeB.x / 2;\n  var halfHeightB = sizeB.y / 2;\n\n  // These are the boundaries of the rect passed in as `entity`\n  var rightB = positionB.x + halfWidthB;\n  var leftB = positionB.x - halfWidthB;\n  var topB = positionB.y + halfHeightB;\n  var bottomB = positionB.y - halfHeightB;\n\n  // The X and Y values that are closest to center of this component but still\n  // within the bounds of the rect as defined above\n  var closestX = clamp(positionA.x, leftB, rightB);\n  var closestY = clamp(positionA.y, bottomB, topB);\n\n  var diffX = positionA.x - closestX;\n  var diffY = positionA.y - closestY;\n\n  // Square of the distance between this component's center and the closest\n  // part of the `entity`.\n  var distanceSquared = diffX * diffX + diffY * diffY;\n\n  // Square of the distance between this component's center and its edge.\n  var radiusSquared = this.radius * this.radius;\n\n  // If `distanceSquared` is lower, then there is a part of the `entity` that\n  // is closer to the center of the circle than its own edge, and we have a\n  // collision.\n  return distanceSquared < radiusSquared;\n};\n\nmodule.exports = CircleCollisionComponent;\n","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\n// function to lock a number between a minimum and maximum value.\n\nvar clamp = require('../../helpers').clamp;\n\n/**\n * Object to represent a circular area and check if another entity is inside.\n *\n * Other code should use the `collidesWith()` method to test for collisions.\n *\n * @class\n * @param {*}      entity the entity owning this component\n * @param {number} radius radius of the collision area\n */\nvar CircleCollisionComponent = function CircleCollisionComponent(entity, radius) {\n  this.entity = entity;\n  this.radius = radius;\n  this.size = { x: radius, y: radius };\n  this.type = 'circle';\n};\n\nCircleCollisionComponent.prototype.collidesWith = function (entity) {\n  // `entity` will have a counterpart collision component similar to this one.\n  // dispatch to more specific functions for collision based on the type of that\n  // other component.\n  if (entity.components.collisions.type === 'circle') {\n    return this.collideCircle(entity);\n  } else if (entity.components.collisions.type === 'rect') {\n    return this.collideRect(entity);\n  }\n  return false;\n};\n\nCircleCollisionComponent.prototype.collideCircle = function (entity) {\n  var positionA = this.entity.components.physics.position,\n      positionB = entity.components.physics.position;\n\n  var radiusA = this.radius,\n      radiusB = entity.components.collisions.radius;\n\n  var diffX = positionA.x - positionB.x;\n  var diffY = positionA.y - positionB.y;\n\n  // Square of the distance between this component's center and the center of\n  // the `entity`\n  var distanceSquared = Math.pow(diffX, 2) + Math.pow(diffY, 2);\n\n  // Minimum distance between two circles that do not overlap is the total of\n  // both radii.\n  var bothRadii = radiusA + radiusB;\n  var bothRadiiSquared = Math.pow(bothRadii, 2);\n\n  // if [current distance]^2 is less than [minimum distance]^2 there must be\n  // overlap.\n  return distanceSquared < bothRadiiSquared;\n};\n\nCircleCollisionComponent.prototype.collideRect = function (entity) {\n  var positionA = this.entity.components.physics.position;\n  var positionB = entity.components.physics.position;\n  var sizeB = entity.components.collisions.size;\n\n  var halfWidthB = sizeB.x / 2;\n  var halfHeightB = sizeB.y / 2;\n\n  // These are the boundaries of the rect passed in as `entity`\n  var rightB = positionB.x + halfWidthB;\n  var leftB = positionB.x - halfWidthB;\n  var topB = positionB.y + halfHeightB;\n  var bottomB = positionB.y - halfHeightB;\n\n  // The X and Y values that are closest to center of this component but still\n  // within the bounds of the rect as defined above\n  var closestX = clamp(positionA.x, leftB, rightB);\n  var closestY = clamp(positionA.y, bottomB, topB);\n\n  var diffX = positionA.x - closestX;\n  var diffY = positionA.y - closestY;\n\n  // Square of the distance between this component's center and the closest\n  // part of the `entity`.\n  var distanceSquared = diffX * diffX + diffY * diffY;\n\n  // Square of the distance between this component's center and its edge.\n  var radiusSquared = this.radius * this.radius;\n\n  // If `distanceSquared` is lower, then there is a part of the `entity` that\n  // is closer to the center of the circle than its own edge, and we have a\n  // collision.\n  return distanceSquared < radiusSquared;\n};\n\nmodule.exports = CircleCollisionComponent;\n\n},{\"../../helpers\":12}],2:[function(require,module,exports){\n'use strict';\n\n/**\n * Object to represent a rectangular area and test if another entity is inside.\n *\n * Other code should use the `collidesWith()` method to check for collisions.\n *\n * @class\n * @param {*}      entity the entity owning this component\n * @param {object} size   the x and y dimensions of the collision area\n */\n\nvar RectCollisionComponent = function RectCollisionComponent(entity, size) {\n  this.entity = entity;\n  this.size = size;\n  this.type = 'rect';\n};\n\nRectCollisionComponent.prototype.collidesWith = function (entity) {\n  // the `entity` will have a collision component similar to this one. Based on\n  // the type of that other, we can dispatch to a more specific function.\n  if (entity.components.collisions.type === 'circle') {\n    return this.collideCircle(entity);\n  } else if (entity.components.collisions.type === 'rect') {\n    return this.collideRect(entity);\n  }\n  return false;\n};\n\nRectCollisionComponent.prototype.collideCircle = function (entity) {\n  return entity.components.collisions.collideRect(this.entity);\n};\n\nRectCollisionComponent.prototype.collideRect = function (entity) {\n  var positionA = this.entity.components.physics.position,\n      positionB = entity.components.physics.position;\n\n  var sizeA = this.size;\n  var sizeB = entity.components.collisions.size;\n\n  // measure some dimensions\n  var halfWidthA = sizeA.x / 2;\n  var halfHeightA = sizeA.y / 2;\n  var halfWidthB = sizeB.x / 2;\n  var halfHeightB = sizeB.y / 2;\n\n  var totalWidth = sizeA.x + sizeB.x;\n  var totalHeight = sizeA.y + sizeB.y;\n\n  // get the boundaries of each rect.\n  var leftA = positionA.x - halfWidthA;\n  var rightA = positionA.x + halfWidthA;\n  var bottomA = positionA.y - halfHeightA;\n  var topA = positionA.y + halfHeightA;\n\n  var leftB = positionB.x - halfWidthB;\n  var rightB = positionB.x + halfWidthB;\n  var bottomB = positionB.y - halfHeightB;\n  var topB = positionB.y + halfHeightB;\n\n  // get the boundaries of a rect that would contain both rects inside it.\n  var leftMost = Math.min(leftA, leftB);\n  var rightMost = Math.max(rightA, rightB);\n  var bottomMost = Math.min(bottomA, bottomB);\n  var topMost = Math.max(topA, topB);\n\n  // check for overlaps in each dimension separately.\n  var overlapX = rightMost - leftMost <= totalWidth;\n  var overlapY = topMost - bottomMost <= totalHeight;\n\n  // if both dimensions overlap, then the rects overlap.\n  return overlapX && overlapY;\n};\n\nmodule.exports = RectCollisionComponent;\n\n},{}],3:[function(require,module,exports){\n'use strict';\n\n/**\n * Object to draw an altitude limit to the screen\n *\n * This is used on the `AltitudeLimit` entity that represents either ground or\n * ceiling of the gameboard.\n *\n * @class\n * @param {*} entity the entity owning this component\n */\n\nvar AltLimitGraphicsComponent = function AltLimitGraphicsComponent(entity) {\n  this.entity = entity;\n};\n\nAltLimitGraphicsComponent.prototype.draw = function (context) {\n  var physics = this.entity.components.physics,\n      position = physics.position,\n      width = this.entity.width,\n      height = this.entity.height,\n\n  // note: physics.time has a fairly arbitrary max value set by the entity,\n  // and when it is reached it loops around to zero. This lets us calibrate\n  // the position of what we're drawing against a repeating sequence of\n  // numbers.\n  scrollOffset = physics.time / physics.period * 0.2,\n\n  // The number of colored bands that should be drawn on the rectangle.\n  // These help show the motion of the ground over time. They're each 0.1\n  // units wide, with 0.1-unit gaps, so the distance between each one is\n  // 0.2 units.\n  scrollBands = Math.ceil(width / 0.2);\n\n  context.save();\n  // *Bing* It is now safe to move about the canvas.\n\n  // Using the scroll offset calculated above to decide where to place the\n  // left edge of the rectangle, and thus where the colored bands are going\n  // to be.\n  context.translate(position.x - width / 2 - scrollOffset, position.y - height / 2);\n\n  // Fill the whole rectangle once.\n  context.fillStyle = '#7b725b';\n  context.fillRect(0, 0, width, height);\n\n  // Change the fill color\n  context.fillStyle = '#5d4427';\n  // Fill the bands\n  for (var i = 0; i < scrollBands; i++) {\n    context.fillRect(0.2 * i, 0, 0.1, height);\n  }\n\n  // Fasten your seatbelts, we're returning to the starting position.\n  context.restore();\n};\n\nmodule.exports = AltLimitGraphicsComponent;\n\n},{}],4:[function(require,module,exports){\n'use strict';\n\n/**\n * Object to draw a pipe to the screen.\n *\n * @class\n * @param {*} entity the entity owning this component\n */\n\nvar PipeGraphicsComponent = function PipeGraphicsComponent(entity) {\n  this.entity = entity;\n  this.image = new Image();\n  this.image.src = 'images/pipe-top.png';\n};\n\nPipeGraphicsComponent.prototype.draw = function (context) {\n  var position = this.entity.components.physics.position,\n      width = this.entity.width,\n      height = this.entity.height,\n      attachT = this.entity.attach === 'T'; // Is this a top pipe or bottom?\n\n  context.save();\n  context.translate(position.x - width / 2, attachT ? 1 - height : 0);\n  context.fillStyle = '#07c300';\n  context.fillRect(0, 0, width, height);\n\n  // Draw the lip of the pipe\n  context.translate(-0.005, attachT ? 0 : height - 0.05);\n  context.drawImage(this.image, 0, 0, width + 0.01, 0.05);\n  context.restore();\n};\n\nmodule.exports = PipeGraphicsComponent;\n\n},{}],5:[function(require,module,exports){\n'use strict';\n\n/**\n * Object to draw the player's avatar\n *\n * @class\n * @param {*} entity the entity owning this components\n */\n\nvar PlayerGraphicsComponent = function PlayerGraphicsComponent(entity) {\n  var _this = this;\n\n  this.entity = entity;\n  this.image = new Image();\n  this.image.src = 'images/trump.png';\n\n  // Setting initial AR of the image (We don't know!)\n  this.imgAspectRatio = 0;\n\n  // Set that AR to match the correct size when it becomes available\n  this.image.addEventListener('load', function () {\n    var image = _this.image;\n    _this.imgAspectRatio = image.naturalWidth / image.naturalHeight || 0;\n  });\n};\n\nPlayerGraphicsComponent.prototype.draw = function (context) {\n  var position = this.entity.components.physics.position,\n      width = this.entity.radius * 2,\n      // width to draw = width of entity\n  height = width / this.imgAspectRatio; // height to draw = proportional\n\n  context.save();\n\n  // Go to the center of the avatar area\n  context.translate(position.x, position.y);\n\n  // Player starts to nose down as the velocity goes below 0, or tilt back if\n  // velocity higher than 0\n  context.rotate(-0.3 + this.entity.components.physics.velocity.y / 3);\n\n  // Move from the center of the player to the corner\n  context.translate(-(width / 2), height / 2);\n\n  // Flip y axis (because GraphicsSystem by default sets 0 as bottom of the\n  // canvas)\n  context.scale(1, -1);\n\n  // Draw Trump\n  context.drawImage(this.image, 0, 0, width, height);\n\n  context.restore();\n};\n\nmodule.exports = PlayerGraphicsComponent;\n\n},{}],6:[function(require,module,exports){\n'use strict';\n\n/**\n * Object to maintain the position of an entity.\n *\n * @class\n * @param {*} entity the entity owning this component\n */\n\nvar PhysicsComponent = function PhysicsComponent(entity) {\n  this.entity = entity;\n  this.time = 0;\n  this.position = {\n    x: 0,\n    y: 0\n  };\n  this.velocity = {\n    x: 0,\n    y: 0\n  };\n  this.acceleration = {\n    x: 0,\n    y: 0\n  };\n};\n\nPhysicsComponent.prototype.update = function (delta) {\n  this.time = this.time + delta;\n\n  // if period was set, we modulo the time by the period, so that the time will\n  // repeat over the course of many updates.\n  this.period > 0 && (this.time %= this.period);\n\n  // Update velocity based on acceleration and time\n  this.velocity.x += this.acceleration.x * delta;\n  this.velocity.y += this.acceleration.y * delta;\n\n  // Update position based on velocity and time\n  this.position.x += this.velocity.x * delta;\n  this.position.y += this.velocity.y * delta;\n};\n\nmodule.exports = PhysicsComponent;\n\n},{}],7:[function(require,module,exports){\n'use strict';\n\n/**\n * Object to play any sound the game knows about.\n *\n * @class\n * @param {*} entity the entity owning this component\n */\n\nvar SoundComponent = function SoundComponent(entity) {\n  this.entity = entity;\n};\n\n// Static property\nSoundComponent.sounds = [\n// filenames used to make sounds in the app.\n'flap.wav', 'ching.wav', 'slap.wav', 'nothappen.mp3', 'runwin.mp3']\n// convert from array of names to a mapping (object) that associates names\n// to audio elements.\n.reduce(function (sounds, fname) {\n  sounds[fname] = new Audio('sounds/' + fname);\n  sounds[fname].load(); // Preload each element so it can play on demand.\n  return sounds;\n}, {});\n\nSoundComponent.prototype.playSound = function (fname) {\n  var s = SoundComponent.sounds[fname];\n  s.load();\n  s.play();\n};\n\nSoundComponent.prototype.flapSound = function () {\n  this.playSound('flap.wav');\n};\n\nSoundComponent.prototype.scoreSound = function () {\n  this.playSound('ching.wav');\n};\n\nSoundComponent.prototype.dieSound = function () {\n  this.playSound('slap.wav');\n  this.playSound('nothappen.mp3');\n};\n\nSoundComponent.prototype.resetSound = function () {\n  this.playSound('runwin.mp3');\n};\n\nmodule.exports = SoundComponent;\n\n},{}],8:[function(require,module,exports){\n'use strict';\n\nvar AltLimitGraphicsComponent = require('../components/graphics/altitude-limit'),\n    PhysicsComponent = require('../components/physics/physics'),\n    RectCollisionComponent = require('../components/collisions/rectangle');\n\n/**\n * Object to represent either the ground or ceiling of the game board.\n *\n * @class\n * @param {number} yPosition how high to draw (center of) this block.\n */\nvar AltitudeLimit = function AltitudeLimit(yPosition) {\n  this.height = 0.02;\n  this.width = 10;\n\n  this.components = {\n    graphics: new AltLimitGraphicsComponent(this),\n    physics: new PhysicsComponent(this),\n    collisions: new RectCollisionComponent(this, { x: this.width, y: this.height })\n  };\n\n  // Physics component has been set up to return its 'time' property to `0` when\n  // it reaches the number set in 'period'. Why is it on the physics component?\n  // Because that's the only place keeping track of time every frame.\n  //\n  // note: 0.2 is the distance between stripes on the altitude component when\n  // drawn to the screen. 0.35 is the rate of movement left to right per frame,\n  // so the resulting period is the distance to move the stripes in each frame\n  this.components.physics.period = 0.2 / 0.35;\n\n  this.components.physics.position.x = 0;\n  this.components.physics.position.y = this.height / 2 + yPosition;\n};\n\nmodule.exports = AltitudeLimit;\n\n},{\"../components/collisions/rectangle\":2,\"../components/graphics/altitude-limit\":3,\"../components/physics/physics\":6}],9:[function(require,module,exports){\n'use strict';\n\nvar PipeGraphicsComponent = require('../components/graphics/pipe'),\n    PhysicsComponent = require('../components/physics/physics'),\n    SoundComponent = require('../components/sound/sound'),\n    RectCollisionComponent = require('../components/collisions/rectangle');\n\n/**\n * Object to represent a pipe, either at the top of the screen or the bottom\n *\n * @class\n * @param {number}    startX position on the canvas for the left edge. Should be\n *                           outside the bounds of the screen.\n * @param {number}    height height of the pipe\n * @param {string}    attach where to start drawing the pipe ('T' or 'B' only)\n * @param {function?} passCb function to execute when the pipe is past the\n *                           middle of the screen\n */\nvar Pipe = function Pipe(startX, height, attach, passCb) {\n  this.attach = attach;\n  this.height = height;\n  this.width = 0.15;\n\n  this.components = {\n    graphics: new PipeGraphicsComponent(this),\n    physics: new PhysicsComponent(this),\n    sound: new SoundComponent(this),\n    collisions: new RectCollisionComponent(this, { x: this.width, y: this.height })\n  };\n\n  // Really hacky. This augments the physics update to check the new position\n  // and trigger a callback when it first passes below 0 (i.e., the center of\n  // the play area). The cb in this instance ties back to a method of the\n  // ObstacleSystem object that created this pipe, which will be overridden by\n  // the main module to route through to the UISystem. Only the top pipe even\n  // gets this. YUCK. This begs for a refactor.\n  var sound = this.components.sound,\n      scoreSound = sound.scoreSound.bind(sound);\n  this.components.physics.update = function () {\n    PhysicsComponent.prototype.update.apply(this, arguments);\n    if (passCb && this.position.x <= 0) {\n      passCb();\n      passCb = null;\n      scoreSound();\n    }\n  };\n\n  // Adding half the width to the left edge to get the horizontal center\n  this.components.physics.position.x = startX + this.width / 2;\n  // Find the vertical center based on the attach point and the height\n  this.components.physics.position.y = attach === 'T' ? 1 - height / 2 : height / 2;\n  this.components.physics.velocity.x = -0.35;\n};\n\nmodule.exports = Pipe;\n\n},{\"../components/collisions/rectangle\":2,\"../components/graphics/pipe\":4,\"../components/physics/physics\":6,\"../components/sound/sound\":7}],10:[function(require,module,exports){\n'use strict';\n\nvar PlayerGraphicsComponent = require('../components/graphics/player'),\n    PhysicsComponent = require('../components/physics/physics'),\n    SoundComponent = require('../components/sound/sound'),\n    CircleCollisionComponent = require('../components/collisions/circle');\n\n/**\n * Object to represont the player's avatar\n *\n * @class\n */\nvar Player = function Player() {\n  this.radius = 0.05;\n\n  this.components = {\n    graphics: new PlayerGraphicsComponent(this),\n    sound: new SoundComponent(this),\n    collisions: new CircleCollisionComponent(this, this.radius)\n  };\n\n  this.reset();\n};\n\nPlayer.prototype.reset = function () {\n  this.components.physics = new PhysicsComponent();\n  this.components.physics.position.y = 0.5;\n  this.components.sound.resetSound();\n};\n\nPlayer.prototype.start = function () {\n  this.components.physics.acceleration.y = -1.75;\n};\n\nPlayer.prototype.flap = function () {\n  this.components.physics.velocity.y = 0.55;\n  this.components.sound.flapSound();\n};\n\nPlayer.prototype.die = function () {\n  this.components.physics.velocity.y = 0;\n  this.components.physics.acceleration.y = 0;\n  this.components.sound.dieSound();\n};\n\nmodule.exports = Player;\n\n},{\"../components/collisions/circle\":1,\"../components/graphics/player\":5,\"../components/physics/physics\":6,\"../components/sound/sound\":7}],11:[function(require,module,exports){\n'use strict';\n\nvar GraphicsSystem = require('./systems/graphics'),\n    PhysicsSystem = require('./systems/physics'),\n    InputSystem = require('./systems/input'),\n    ObstacleSystem = require('./systems/obstacles'),\n    UISystem = require('./systems/ui'),\n    Player = require('./entities/player');\n\n/**\n * Game state manager\n *\n * @class\n * @param {HTMLCanvasElement} canvas what to draw on\n */\nvar FlappyTrump = function FlappyTrump(canvas) {\n  var _this = this;\n\n  this.player = new Player();\n  this.entities = [this.player];\n\n  this.graphics = new GraphicsSystem(this.entities, canvas);\n  this.physics = new PhysicsSystem(this.entities);\n  this.input = new InputSystem(this.entities, canvas);\n  this.obstacles = new ObstacleSystem(this.entities, canvas);\n  this.ui = new UISystem();\n\n  this.obstacles.onPassObstacle = function () {\n    _this.ui.bumpScore();\n  };\n\n  this.player.components.collisions.onCollision = function () {\n    _this.obstacles.pause();\n    _this.graphics.pause();\n    _this.physics.pause();\n    _this.input.started = false;\n    _this.ui.reset();\n    _this.player.die();\n  };\n\n  this.ui.onReady = function () {\n    _this.player.reset();\n    _this.obstacles.reset();\n    _this.graphics.run();\n    _this.physics.run();\n  };\n};\n\nFlappyTrump.prototype.run = function () {\n  var _this2 = this;\n\n  this.graphics.run();\n  this.input.run();\n  this.physics.run();\n  this.input.onStartGame = function () {\n    if (!_this2.ui.isReady) {\n      return false;\n    }\n    _this2.obstacles.run();\n    _this2.ui.start();\n    _this2.player.start();\n    return true;\n  };\n};\n\nmodule.exports = FlappyTrump;\n\n},{\"./entities/player\":10,\"./systems/graphics\":15,\"./systems/input\":16,\"./systems/obstacles\":17,\"./systems/physics\":18,\"./systems/ui\":19}],12:[function(require,module,exports){\n'use strict';\n\n// some simple functions to avoid spelling stuff out in the classes\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar h = exports;\n\nh.clamp = function (value, low, high) {\n  if (value < low) {\n    return low;\n  }\n  if (value > high) {\n    return high;\n  }\n  return value;\n};\n\nh.subtract = function (a, b) {\n  return a - b;\n};\n\nh.scale = function (value, srcRange, dstRange) {\n  var _srcRange$sort = srcRange.sort(h.subtract);\n\n  var _srcRange$sort2 = _slicedToArray(_srcRange$sort, 2);\n\n  var srcMin = _srcRange$sort2[0];\n  var srcMax = _srcRange$sort2[1];\n\n  var _dstRange$sort = dstRange.sort(h.subtract);\n\n  var _dstRange$sort2 = _slicedToArray(_dstRange$sort, 2);\n\n  var dstMin = _dstRange$sort2[0];\n  var dstMax = _dstRange$sort2[1];\n  var srcSize = srcMax - srcMin;\n  var dstSize = dstMax - dstMin;\n\n  return (value - srcMin) / srcSize * dstSize + dstMin;\n};\n\n},{}],13:[function(require,module,exports){\n'use strict';\n\n// Bootstrap code\n\nvar FlappyTrump = require('./flappy-trump');\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  var canvas = document.getElementById('main-canvas'),\n      app = new FlappyTrump(canvas);\n  app.run();\n});\n\n},{\"./flappy-trump\":11}],14:[function(require,module,exports){\n'use strict';\n\n/**\n * Object to iterate through pairs of collide-able entities looking for overlap\n *\n * @class\n * @param {Array} entities all the entities in the game\n */\n\nvar CollisionSystem = function CollisionSystem(entities) {\n  this.entities = entities;\n};\n\nCollisionSystem.prototype.tick = function () {\n  for (var i = 0; i < this.entities.length; i++) {\n    var entityA = this.entities[i];\n    if (!('collisions' in entityA.components)) {\n      continue;\n    }\n\n    for (var j = i + 1; j < this.entities.length; j++) {\n      var entityB = this.entities[j];\n      if (!('collisions' in entityB.components)) {\n        continue;\n      }\n\n      if (!entityA.components.collisions.collidesWith(entityB)) {\n        continue;\n      }\n\n      if (entityA.components.collisions.onCollision) {\n        entityA.components.collisions.onCollision(entityB);\n      }\n\n      if (entityB.components.collisions.onCollision) {\n        entityB.components.collisions.onCollision(entityA);\n      }\n    }\n  }\n};\n\nmodule.exports = CollisionSystem;\n\n},{}],15:[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar AltitudeLimit = require('../entities/altitude-limit');\n\n/**\n * Object to iterate through entities and draw them to the screen\n *\n * @param {Array}             entities all the entities in the system\n * @param {HTMLCanvasElement} canvas   the canvas to draw on\n */\nvar GraphicsSystem = function GraphicsSystem(entities, canvas) {\n  this.entities = entities;\n  this.canvas = canvas;\n  this.context = canvas.getContext('2d');\n};\n\nGraphicsSystem.prototype.run = function () {\n  var tick = GraphicsSystem.prototype.tick.bind(this);\n  (function recur() {\n    global.requestAnimationFrame(function (t) {\n      tick(t, recur);\n    });\n  })();\n};\n\nGraphicsSystem.prototype.pause = function () {\n  this.tick = function () {};\n};\n\nGraphicsSystem.prototype.tick = function (t, cb) {\n  var _this = this;\n\n  // Blank slate.\n  if (this.canvas.width !== this.canvas.offsetWith || this.canvas.height !== this.canvas.offsetHeight) {\n    this.canvas.width = this.canvas.offsetWidth;\n    this.canvas.height = this.canvas.offsetHeight;\n    this.entities.forEach(function (ent) {\n      if (ent instanceof AltitudeLimit) {\n        ent.width = _this.canvas.width / _this.canvas.height + 0.5;\n      }\n    });\n  }\n  this.context.fillStyle = this.context.createLinearGradient(0, 0, 0, this.canvas.height);\n  this.context.fillStyle.addColorStop(0.25, '#fdfcfc');\n  this.context.fillStyle.addColorStop(1, '#b1b1b1');\n  this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);\n  this.context.save();\n  this.context.translate(this.canvas.width / 2, this.canvas.height);\n  this.context.scale(this.canvas.height, -this.canvas.height);\n\n  // Render.\n  this.entities.forEach(function (entity) {\n    if (!entity.components || !entity.components.graphics) {\n      return;\n    }\n    entity.components.graphics.draw(_this.context);\n  });\n\n  this.context.restore();\n\n  cb && cb();\n};\n\nmodule.exports = GraphicsSystem;\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"../entities/altitude-limit\":8}],16:[function(require,module,exports){\n'use strict';\n\n/**\n * Object to move the player avatar on click/tap\n *\n * @class\n * @param {Array}             entities all the entities in the game\n * @param {HTMLCanvasElement} canvas   the canvas to draw on\n */\n\nvar InputSystem = function InputSystem(entities, canvas) {\n  this.entities = entities;\n  this.canvas = canvas;\n  this.started = false;\n};\n\nInputSystem.prototype.run = function () {\n  this.canvas.addEventListener('mousedown', this.onClick.bind(this));\n  this.canvas.addEventListener('touchstart', this.onTouchStart.bind(this));\n  this.canvas.addEventListener('touchend', this.onTouchEnd.bind(this));\n  this.canvas.addEventListener('touchmove', this.onTouchMove.bind(this));\n  this.canvas.addEventListener('touchcancel', this.onTouchCancel.bind(this));\n};\n\nInputSystem.prototype.onClick = function (evt) {\n  evt.preventDefault();\n  if (!this.started) {\n    if (!this.onStartGame()) {\n      return;\n    }\n    this.started = true;\n  }\n  var player = this.entities[0];\n  player.flap();\n};\n\nInputSystem.prototype.onTouchStart = function (evt) {\n  evt.preventDefault();\n  this.touching || this.onClick();\n  this.touching = true;\n};\n\nInputSystem.prototype.onTouchEnd = function (evt) {\n  evt.preventDefault();\n  this.touching = false;\n};\n\nInputSystem.prototype.onTouchMove = function (evt) {\n  evt.preventDefault();\n};\n\nInputSystem.prototype.onTouchCancel = function (evt) {\n  evt.preventDefault();\n  this.touching = false;\n};\n\nmodule.exports = InputSystem;\n\n},{}],17:[function(require,module,exports){\n'use strict';\n\nvar Pipe = require('../entities/pipe'),\n    AltitudeLimit = require('../entities/altitude-limit'),\n    scale = require('../helpers').scale;\n\n/**\n * Object to manage adding and deleting the obstacles to the game board\n *\n * @class\n * @param {Array}             entities all the entities in the game\n * @param {HTMLCanvasElement} canvas   the canvas to draw on\n */\nvar ObstacleSystem = function ObstacleSystem(entities, canvas) {\n  this.entities = entities;\n  this.canvas = canvas;\n  this.ground = new AltitudeLimit(0);\n  this.ceiling = new AltitudeLimit(1.01);\n  this.entities.push(this.ground, this.ceiling);\n  this.intvl = null;\n};\n\nObstacleSystem.prototype.reset = function () {\n  for (var i = this.entities.length - 1; i >= 0; i--) {\n    if (this.entities[i] instanceof Pipe) {\n      this.entities.splice(i, 1);\n    }\n  }\n};\n\nObstacleSystem.prototype.run = function () {\n  // clear existing pipes\n  this.reset();\n  this.intvl = window.setInterval(this.tick.bind(this), 1000 * 2);\n};\n\nObstacleSystem.prototype.pause = function () {\n  this.intvl && window.clearInterval(this.intvl);\n  this.intvl = null;\n};\n\nObstacleSystem.prototype.tick = function () {\n  var _this = this;\n\n  var aspectRatio = this.canvas.width / 2 / this.canvas.height,\n      height = scale(Math.random(), [0, 1], [0.2, 0.8]),\n      gap = 0.25,\n      height1 = height - gap / 2,\n      height2 = 1 - height1 - gap,\n      pass = this.onPassObstacle.bind(this);\n\n  this.entities.push(new Pipe(aspectRatio, height1, 'T', pass));\n  this.entities.push(new Pipe(aspectRatio, height2, 'B'));\n  this.entities.forEach(function (ent, i) {\n    if (ent.components.physics.position.x < -aspectRatio - ent.width / 2) {\n      _this.entities.splice(i, 1);\n    }\n  });\n};\n\nObstacleSystem.prototype.onPassObstacle = function () {};\n\nmodule.exports = ObstacleSystem;\n\n},{\"../entities/altitude-limit\":8,\"../entities/pipe\":9,\"../helpers\":12}],18:[function(require,module,exports){\n'use strict';\n\nvar CollisionSystem = require('./collisions');\n\n/**\n * Object to update the physics parameters on each object that has them @60fps\n *\n * @class\n * @param {Array} entities all the entities in the game\n */\nvar PhysicsSystem = function PhysicsSystem(entities) {\n  this.entities = entities;\n  this.collisions = new CollisionSystem(entities);\n  this.intvl = null;\n};\n\nPhysicsSystem.prototype.run = function () {\n  this.intvl = setInterval(this.tick.bind(this), 1000 / 60);\n};\n\nPhysicsSystem.prototype.pause = function () {\n  this.intvl && clearInterval(this.intvl);\n  this.intvl = null;\n};\n\nPhysicsSystem.prototype.tick = function () {\n  this.entities.forEach(function (entity) {\n    if (!entity.components || !entity.components.physics) {\n      return;\n    }\n    entity.components.physics.update(1 / 60);\n  });\n  this.collisions.tick();\n};\n\nmodule.exports = PhysicsSystem;\n\n},{\"./collisions\":14}],19:[function(require,module,exports){\n'use strict';\n\nvar UISystem = function UISystem() {\n  this.highScore = localStorage.getItem('ft-high-score') || 0;\n  this.endingSplashElt = document.getElementById('ft-ending-splash');\n  this.finalScoreElt = document.getElementById('ft-final-score');\n  this.highScoreElt = document.getElementById('ft-high-score');\n  this.readyButton = document.getElementById('ft-ready-button');\n  this.readySplashElt = document.getElementById('ft-ready-splash');\n  this.scoreElt = document.getElementById('ft-score');\n  this.readyButton.onclick = this.ready.bind(this);\n  this.ready();\n};\n\nUISystem.prototype.ready = function () {\n  this.endingSplashElt.style.display = 'none';\n  this.scoreElt.style.display = 'inline-block';\n  this.readySplashElt.style.display = 'inline-block';\n\n  this.score = 0;\n  this.scoreElt.textContent = '0';\n  this.isReady = true;\n  this.onReady();\n};\n\nUISystem.prototype.onReady = function () {};\n\nUISystem.prototype.start = function () {\n  this.endingSplashElt.style.display = 'none';\n  this.scoreElt.style.display = 'inline-block';\n  this.readySplashElt.style.display = 'none';\n};\n\nUISystem.prototype.reset = function () {\n  this.highScore = Math.max(this.highScore, this.score);\n  localStorage.setItem('ft-high-score', this.highScore);\n\n  this.highScoreElt.textContent = this.highScore.toString();\n  this.finalScoreElt.textContent = this.score.toString();\n\n  this.endingSplashElt.style.display = 'inline-block';\n  this.scoreElt.style.display = 'none';\n  this.readySplashElt.style.display = 'none';\n  this.isReady = false;\n};\n\nUISystem.prototype.bumpScore = function () {\n  this.scoreElt.textContent = (++this.score).toString();\n};\n\nmodule.exports = UISystem;\n\n},{}]},{},[13])\n\n","'use strict';\n\n/**\n * Object to represent a rectangular area and test if another entity is inside.\n *\n * Other code should use the `collidesWith()` method to check for collisions.\n *\n * @class\n * @param {*}      entity the entity owning this component\n * @param {object} size   the x and y dimensions of the collision area\n */\nvar RectCollisionComponent = function RectCollisionComponent(entity, size) {\n  this.entity = entity;\n  this.size = size;\n  this.type = 'rect';\n};\n\nRectCollisionComponent.prototype.collidesWith = function (entity) {\n  // the `entity` will have a collision component similar to this one. Based on\n  // the type of that other, we can dispatch to a more specific function.\n  if (entity.components.collisions.type === 'circle') {\n    return this.collideCircle(entity);\n  }\n  else if (entity.components.collisions.type === 'rect') {\n    return this.collideRect(entity);\n  }\n  return false;\n};\n\nRectCollisionComponent.prototype.collideCircle = function (entity) {\n  return entity.components.collisions.collideRect(this.entity);\n};\n\nRectCollisionComponent.prototype.collideRect = function (entity) {\n  var positionA = this.entity.components.physics.position,\n      positionB = entity.components.physics.position;\n\n  var sizeA = this.size;\n  var sizeB = entity.components.collisions.size;\n\n  // measure some dimensions\n  var halfWidthA = sizeA.x / 2;\n  var halfHeightA = sizeA.y / 2;\n  var halfWidthB = sizeB.x / 2;\n  var halfHeightB = sizeB.y / 2;\n\n  var totalWidth = sizeA.x + sizeB.x;\n  var totalHeight = sizeA.y + sizeB.y;\n\n  // get the boundaries of each rect.\n  var leftA = positionA.x - halfWidthA;\n  var rightA = positionA.x + halfWidthA;\n  var bottomA = positionA.y - halfHeightA;\n  var topA = positionA.y + halfHeightA;\n\n  var leftB = positionB.x - halfWidthB;\n  var rightB = positionB.x + halfWidthB;\n  var bottomB = positionB.y - halfHeightB;\n  var topB = positionB.y + halfHeightB;\n\n  // get the boundaries of a rect that would contain both rects inside it.\n  var leftMost = Math.min(leftA, leftB);\n  var rightMost = Math.max(rightA, rightB);\n  var bottomMost = Math.min(bottomA, bottomB);\n  var topMost = Math.max(topA, topB);\n\n  // check for overlaps in each dimension separately.\n  var overlapX = rightMost - leftMost <= totalWidth;\n  var overlapY = topMost - bottomMost <= totalHeight;\n\n  // if both dimensions overlap, then the rects overlap.\n  return overlapX && overlapY;\n};\n\nmodule.exports = RectCollisionComponent;\n","'use strict';\n\n/**\n * Object to draw an altitude limit to the screen\n *\n * This is used on the `AltitudeLimit` entity that represents either ground or\n * ceiling of the gameboard.\n *\n * @class\n * @param {*} entity the entity owning this component\n */\nvar AltLimitGraphicsComponent = function AltLimitGraphicsComponent(entity) {\n  this.entity = entity;\n};\n\nAltLimitGraphicsComponent.prototype.draw = function (context) {\n  var physics = this.entity.components.physics,\n      position = physics.position,\n      width = this.entity.width,\n      height = this.entity.height,\n      // note: physics.time has a fairly arbitrary max value set by the entity,\n      // and when it is reached it loops around to zero. This lets us calibrate\n      // the position of what we're drawing against a repeating sequence of\n      // numbers.\n      scrollOffset = physics.time / physics.period * 0.2,\n\n      // The number of colored bands that should be drawn on the rectangle.\n      // These help show the motion of the ground over time. They're each 0.1\n      // units wide, with 0.1-unit gaps, so the distance between each one is\n      // 0.2 units.\n      scrollBands = Math.ceil(width / 0.2);\n\n  context.save();\n  // *Bing* It is now safe to move about the canvas.\n\n  // Using the scroll offset calculated above to decide where to place the\n  // left edge of the rectangle, and thus where the colored bands are going\n  // to be.\n  context.translate(\n    position.x - (width / 2) - scrollOffset,\n    position.y - (height / 2));\n\n  // Fill the whole rectangle once.\n  context.fillStyle = '#7b725b';\n  context.fillRect(0, 0, width, height);\n\n  // Change the fill color\n  context.fillStyle = '#5d4427';\n  // Fill the bands\n  for (var i = 0; i < scrollBands; i++) {\n    context.fillRect(0.2 * i, 0, 0.1, height);\n  }\n\n  // Fasten your seatbelts, we're returning to the starting position.\n  context.restore();\n};\n\nmodule.exports = AltLimitGraphicsComponent;\n","'use strict';\n\n/**\n * Object to draw a pipe to the screen.\n *\n * @class\n * @param {*} entity the entity owning this component\n */\nvar PipeGraphicsComponent = function PipeGraphicsComponent(entity) {\n  this.entity = entity;\n  this.image = new Image();\n  this.image.src = 'images/pipe-top.png';\n};\n\nPipeGraphicsComponent.prototype.draw = function (context) {\n  var position = this.entity.components.physics.position,\n      width = this.entity.width,\n      height = this.entity.height,\n      attachT = this.entity.attach === 'T'; // Is this a top pipe or bottom?\n\n  context.save();\n  context.translate(position.x - (width / 2), attachT ? 1 - height : 0);\n  context.fillStyle = '#07c300';\n  context.fillRect(0, 0, width, height);\n\n  // Draw the lip of the pipe\n  context.translate(-0.005, attachT ? 0 : height - 0.05);\n  context.drawImage(this.image, 0, 0, width + 0.01, 0.05);\n  context.restore();\n};\n\nmodule.exports = PipeGraphicsComponent;\n","'use strict';\n\n/**\n * Object to draw the player's avatar\n *\n * @class\n * @param {*} entity the entity owning this components\n */\nvar PlayerGraphicsComponent = function PlayerGraphicsComponent(entity) {\n  this.entity = entity;\n  this.image = new Image();\n  this.image.src = 'images/trump.png';\n\n  // Setting initial AR of the image (We don't know!)\n  this.imgAspectRatio = 0;\n\n  // Set that AR to match the correct size when it becomes available\n  this.image.addEventListener('load', () => {\n    var image = this.image;\n    this.imgAspectRatio = image.naturalWidth / image.naturalHeight || 0;\n  });\n};\n\nPlayerGraphicsComponent.prototype.draw = function (context) {\n  var position = this.entity.components.physics.position,\n      width = this.entity.radius * 2, // width to draw = width of entity\n      height = width / this.imgAspectRatio; // height to draw = proportional\n\n  context.save();\n\n  // Go to the center of the avatar area\n  context.translate(position.x, position.y);\n\n  // Player starts to nose down as the velocity goes below 0, or tilt back if\n  // velocity higher than 0\n  context.rotate(-0.3 + this.entity.components.physics.velocity.y / 3);\n\n  // Move from the center of the player to the corner\n  context.translate(-(width / 2), height / 2);\n\n  // Flip y axis (because GraphicsSystem by default sets 0 as bottom of the\n  // canvas)\n  context.scale(1, -1);\n\n  // Draw Trump\n  context.drawImage(this.image, 0, 0, width, height);\n\n  context.restore();\n};\n\nmodule.exports = PlayerGraphicsComponent;\n","'use strict';\n\n/**\n * Object to maintain the position of an entity.\n *\n * @class\n * @param {*} entity the entity owning this component\n */\nvar PhysicsComponent = function PhysicsComponent (entity) {\n  this.entity = entity;\n  this.time = 0;\n  this.position = {\n    x: 0,\n    y: 0\n  };\n  this.velocity = {\n    x: 0,\n    y: 0\n  };\n  this.acceleration = {\n    x: 0,\n    y: 0\n  };\n};\n\nPhysicsComponent.prototype.update = function (delta) {\n  this.time = this.time + delta;\n\n  // if period was set, we modulo the time by the period, so that the time will\n  // repeat over the course of many updates.\n  this.period > 0 && (this.time %= this.period);\n\n  // Update velocity based on acceleration and time\n  this.velocity.x += this.acceleration.x * delta;\n  this.velocity.y += this.acceleration.y * delta;\n\n  // Update position based on velocity and time\n  this.position.x += this.velocity.x * delta;\n  this.position.y += this.velocity.y * delta;\n};\n\nmodule.exports = PhysicsComponent;\n","'use strict';\n\n/**\n * Object to play any sound the game knows about.\n *\n * @class\n * @param {*} entity the entity owning this component\n */\nvar SoundComponent = function SoundComponent(entity) {\n  this.entity = entity;\n};\n\n// Static property\nSoundComponent.sounds = [\n  // filenames used to make sounds in the app.\n  'flap.wav', 'ching.wav', 'slap.wav', 'nothappen.mp3', 'runwin.mp3'\n]\n  // convert from array of names to a mapping (object) that associates names\n  // to audio elements.\n  .reduce((sounds, fname) => {\n    sounds[fname] = new Audio('sounds/' + fname);\n    sounds[fname].load(); // Preload each element so it can play on demand.\n    return sounds;\n  }, {});\n\nSoundComponent.prototype.playSound = function (fname) {\n  var s = SoundComponent.sounds[fname];\n  s.load();\n  s.play();\n};\n\nSoundComponent.prototype.flapSound = function () {\n  this.playSound('flap.wav');\n};\n\nSoundComponent.prototype.scoreSound = function () {\n  this.playSound('ching.wav');\n};\n\nSoundComponent.prototype.dieSound = function () {\n  this.playSound('slap.wav');\n  this.playSound('nothappen.mp3');\n};\n\nSoundComponent.prototype.resetSound = function () {\n  this.playSound('runwin.mp3');\n};\n\nmodule.exports = SoundComponent;\n","'use strict';\n\nvar AltLimitGraphicsComponent = require(\n      '../components/graphics/altitude-limit'),\n    PhysicsComponent = require('../components/physics/physics'),\n    RectCollisionComponent = require('../components/collisions/rectangle');\n\n/**\n * Object to represent either the ground or ceiling of the game board.\n *\n * @class\n * @param {number} yPosition how high to draw (center of) this block.\n */\nvar AltitudeLimit = function AltitudeLimit(yPosition) {\n  this.height = 0.02;\n  this.width = 10;\n\n  this.components = {\n    graphics: new AltLimitGraphicsComponent(this),\n    physics: new PhysicsComponent(this),\n    collisions: new RectCollisionComponent(\n      this, { x: this.width, y: this.height })\n  };\n\n  // Physics component has been set up to return its 'time' property to `0` when\n  // it reaches the number set in 'period'. Why is it on the physics component?\n  // Because that's the only place keeping track of time every frame.\n  //\n  // note: 0.2 is the distance between stripes on the altitude component when\n  // drawn to the screen. 0.35 is the rate of movement left to right per frame,\n  // so the resulting period is the distance to move the stripes in each frame\n  this.components.physics.period = 0.2 / 0.35;\n\n  this.components.physics.position.x = 0;\n  this.components.physics.position.y = (this.height / 2) + yPosition;\n};\n\nmodule.exports = AltitudeLimit;\n","'use strict';\n\nvar PipeGraphicsComponent = require('../components/graphics/pipe'),\n    PhysicsComponent = require('../components/physics/physics'),\n    SoundComponent = require('../components/sound/sound'),\n    RectCollisionComponent = require('../components/collisions/rectangle');\n\n/**\n * Object to represent a pipe, either at the top of the screen or the bottom\n *\n * @class\n * @param {number}    startX position on the canvas for the left edge. Should be\n *                           outside the bounds of the screen.\n * @param {number}    height height of the pipe\n * @param {string}    attach where to start drawing the pipe ('T' or 'B' only)\n * @param {function?} passCb function to execute when the pipe is past the\n *                           middle of the screen\n */\nvar Pipe = function Pipe(startX, height, attach, passCb) {\n  this.attach = attach;\n  this.height = height;\n  this.width = 0.15;\n\n  this.components = {\n    graphics: new PipeGraphicsComponent(this),\n    physics: new PhysicsComponent(this),\n    sound: new SoundComponent(this),\n    collisions: new RectCollisionComponent(\n      this, { x: this.width, y: this.height })\n  };\n\n  // Really hacky. This augments the physics update to check the new position\n  // and trigger a callback when it first passes below 0 (i.e., the center of\n  // the play area). The cb in this instance ties back to a method of the\n  // ObstacleSystem object that created this pipe, which will be overridden by\n  // the main module to route through to the UISystem. Only the top pipe even\n  // gets this. YUCK. This begs for a refactor.\n  var sound = this.components.sound,\n      scoreSound = sound.scoreSound.bind(sound);\n  this.components.physics.update = function () {\n    PhysicsComponent.prototype.update.apply(this, arguments);\n    if (passCb && this.position.x <= 0) {\n      passCb();\n      passCb = null;\n      scoreSound();\n    }\n  };\n\n  // Adding half the width to the left edge to get the horizontal center\n  this.components.physics.position.x = startX + (this.width / 2);\n  // Find the vertical center based on the attach point and the height\n  this.components.physics.position.y = attach === 'T'\n    ? 1 - (height / 2)\n    : height / 2;\n  this.components.physics.velocity.x = -0.35;\n};\n\nmodule.exports = Pipe;\n","'use strict';\n\nvar PlayerGraphicsComponent = require('../components/graphics/player'),\n    PhysicsComponent = require('../components/physics/physics'),\n    SoundComponent = require('../components/sound/sound'),\n    CircleCollisionComponent = require('../components/collisions/circle');\n\n/**\n * Object to represont the player's avatar\n *\n * @class\n */\nvar Player = function Player() {\n  this.radius = 0.05;\n\n  this.components = {\n    graphics: new PlayerGraphicsComponent(this),\n    sound: new SoundComponent(this),\n    collisions: new CircleCollisionComponent(this, this.radius)\n  };\n\n  this.reset();\n};\n\nPlayer.prototype.reset = function () {\n  this.components.physics = new PhysicsComponent();\n  this.components.physics.position.y = 0.5;\n  this.components.sound.resetSound();\n};\n\nPlayer.prototype.start = function () {\n  this.components.physics.acceleration.y = -1.75;\n};\n\nPlayer.prototype.flap = function () {\n  this.components.physics.velocity.y = 0.55;\n  this.components.sound.flapSound();\n};\n\nPlayer.prototype.die = function () {\n  this.components.physics.velocity.y = 0;\n  this.components.physics.acceleration.y = 0;\n  this.components.sound.dieSound();\n};\n\nmodule.exports = Player;\n","'use strict';\n\nvar GraphicsSystem = require('./systems/graphics'),\n    PhysicsSystem = require('./systems/physics'),\n    InputSystem = require('./systems/input'),\n    ObstacleSystem = require('./systems/obstacles'),\n    UISystem = require('./systems/ui'),\n    Player = require('./entities/player');\n\n/**\n * Game state manager\n *\n * @class\n * @param {HTMLCanvasElement} canvas what to draw on\n */\nvar FlappyTrump = function FlappyTrump(canvas) {\n  this.player = new Player();\n  this.entities = [this.player];\n\n  this.graphics = new GraphicsSystem(this.entities, canvas);\n  this.physics = new PhysicsSystem(this.entities);\n  this.input = new InputSystem(this.entities, canvas);\n  this.obstacles = new ObstacleSystem(this.entities, canvas);\n  this.ui = new UISystem();\n\n  this.obstacles.onPassObstacle = () => {\n    this.ui.bumpScore();\n  };\n\n  this.player.components.collisions.onCollision = () => {\n    this.obstacles.pause();\n    this.graphics.pause();\n    this.physics.pause();\n    this.input.started = false;\n    this.ui.reset();\n    this.player.die();\n  };\n\n  this.ui.onReady = () => {\n    this.player.reset();\n    this.obstacles.reset();\n    this.graphics.run();\n    this.physics.run();\n  };\n};\n\nFlappyTrump.prototype.run = function () {\n  this.graphics.run();\n  this.input.run();\n  this.physics.run();\n  this.input.onStartGame = () => {\n    if (!this.ui.isReady) { return false; }\n    this.obstacles.run();\n    this.ui.start();\n    this.player.start();\n    return true;\n  };\n};\n\nmodule.exports = FlappyTrump;\n","'use strict';\n\n// some simple functions to avoid spelling stuff out in the classes\n\nvar h = exports;\n\nh.clamp = function(value, low, high) {\n  if (value < low) {\n    return low;\n  }\n  if (value > high) {\n    return high;\n  }\n  return value;\n};\n\nh.subtract = function (a, b) { return a - b; };\n\nh.scale = function (value, srcRange, dstRange) {\n  var [srcMin, srcMax] = srcRange.sort(h.subtract),\n      [dstMin, dstMax] = dstRange.sort(h.subtract),\n      srcSize = srcMax - srcMin,\n      dstSize = dstMax - dstMin;\n\n  return ((value - srcMin) / srcSize * dstSize) + dstMin;\n};\n","'use strict';\n\n// Bootstrap code\n\nvar FlappyTrump = require('./flappy-trump');\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  var canvas = document.getElementById('main-canvas'),\n      app = new FlappyTrump(canvas);\n  app.run();\n});\n","'use strict';\n\n/**\n * Object to iterate through pairs of collide-able entities looking for overlap\n *\n * @class\n * @param {Array} entities all the entities in the game\n */\nvar CollisionSystem = function CollisionSystem(entities) {\n  this.entities = entities;\n};\n\nCollisionSystem.prototype.tick = function() {\n  for (var i = 0; i < this.entities.length; i++) {\n    var entityA = this.entities[i];\n    if (!('collisions' in entityA.components)) {\n      continue;\n    }\n\n    for (var j = i + 1; j < this.entities.length; j++) {\n      var entityB = this.entities[j];\n      if (!('collisions' in entityB.components)) {\n        continue;\n      }\n\n      if (!entityA.components.collisions.collidesWith(entityB)) {\n        continue;\n      }\n\n      if (entityA.components.collisions.onCollision) {\n        entityA.components.collisions.onCollision(entityB);\n      }\n\n      if (entityB.components.collisions.onCollision) {\n        entityB.components.collisions.onCollision(entityA);\n      }\n    }\n  }\n};\n\nmodule.exports = CollisionSystem;\n","'use strict';\n\nvar AltitudeLimit = require('../entities/altitude-limit');\n\n/**\n * Object to iterate through entities and draw them to the screen\n *\n * @param {Array}             entities all the entities in the system\n * @param {HTMLCanvasElement} canvas   the canvas to draw on\n */\nvar GraphicsSystem = function (entities, canvas) {\n  this.entities = entities;\n  this.canvas = canvas;\n  this.context = canvas.getContext('2d');\n};\n\nGraphicsSystem.prototype.run = function () {\n  var tick = GraphicsSystem.prototype.tick.bind(this);\n  (function recur() {\n    global.requestAnimationFrame((t) => {\n      tick(t, recur);\n    });\n  })();\n};\n\nGraphicsSystem.prototype.pause = function () {\n  this.tick = function () {};\n};\n\nGraphicsSystem.prototype.tick = function (t, cb) {\n  // Blank slate.\n  if (this.canvas.width !== this.canvas.offsetWith ||\n      this.canvas.height !== this.canvas.offsetHeight) {\n    this.canvas.width = this.canvas.offsetWidth;\n    this.canvas.height = this.canvas.offsetHeight;\n    this.entities.forEach((ent) => {\n      if (ent instanceof AltitudeLimit) {\n        ent.width = (this.canvas.width / this.canvas.height) + 0.5;\n      }\n    });\n  }\n  this.context.fillStyle = this.context.createLinearGradient(\n    0, 0, 0, this.canvas.height);\n  this.context.fillStyle.addColorStop(0.25, '#fdfcfc');\n  this.context.fillStyle.addColorStop(1, '#b1b1b1');\n  this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);\n  this.context.save();\n  this.context.translate(this.canvas.width / 2, this.canvas.height);\n  this.context.scale(this.canvas.height, -this.canvas.height);\n\n  // Render.\n  this.entities.forEach((entity) => {\n    if (!entity.components || !entity.components.graphics) { return; }\n    entity.components.graphics.draw(this.context);\n  });\n\n  this.context.restore();\n\n  cb && cb();\n};\n\nmodule.exports = GraphicsSystem;\n","'use strict';\n\n/**\n * Object to move the player avatar on click/tap\n *\n * @class\n * @param {Array}             entities all the entities in the game\n * @param {HTMLCanvasElement} canvas   the canvas to draw on\n */\nvar InputSystem = function InputSystem(entities, canvas) {\n  this.entities = entities;\n  this.canvas = canvas;\n  this.started = false;\n};\n\nInputSystem.prototype.run = function () {\n  this.canvas.addEventListener('mousedown', this.onClick.bind(this));\n  this.canvas.addEventListener('touchstart', this.onTouchStart.bind(this));\n  this.canvas.addEventListener('touchend', this.onTouchEnd.bind(this));\n  this.canvas.addEventListener('touchmove', this.onTouchMove.bind(this));\n  this.canvas.addEventListener('touchcancel', this.onTouchCancel.bind(this));\n};\n\nInputSystem.prototype.onClick = function (evt) {\n  evt.preventDefault();\n  if (!this.started) {\n    if (!this.onStartGame()) { return; }\n    this.started = true;\n  }\n  var player = this.entities[0];\n  player.flap();\n};\n\nInputSystem.prototype.onTouchStart = function (evt) {\n  evt.preventDefault();\n  this.touching || this.onClick();\n  this.touching = true;\n};\n\nInputSystem.prototype.onTouchEnd = function (evt) {\n  evt.preventDefault();\n  this.touching = false;\n};\n\nInputSystem.prototype.onTouchMove = function (evt) {\n  evt.preventDefault();\n};\n\nInputSystem.prototype.onTouchCancel = function (evt) {\n  evt.preventDefault();\n  this.touching = false;\n};\n\nmodule.exports = InputSystem;\n","'use strict';\n\nvar Pipe = require('../entities/pipe'),\n    AltitudeLimit = require('../entities/altitude-limit'),\n    scale = require('../helpers').scale;\n\n/**\n * Object to manage adding and deleting the obstacles to the game board\n *\n * @class\n * @param {Array}             entities all the entities in the game\n * @param {HTMLCanvasElement} canvas   the canvas to draw on\n */\nvar ObstacleSystem = function ObstacleSystem(entities, canvas) {\n  this.entities = entities;\n  this.canvas = canvas;\n  this.ground = new AltitudeLimit(0);\n  this.ceiling = new AltitudeLimit(1.01);\n  this.entities.push(this.ground, this.ceiling);\n  this.intvl = null;\n};\n\nObstacleSystem.prototype.reset = function () {\n  for (var i = this.entities.length - 1; i >= 0; i--) {\n    if (this.entities[i] instanceof Pipe) { this.entities.splice(i, 1); }\n  }\n};\n\nObstacleSystem.prototype.run = function () {\n  // clear existing pipes\n  this.reset();\n  this.intvl = window.setInterval(this.tick.bind(this), 1000 * 2);\n};\n\nObstacleSystem.prototype.pause = function () {\n  this.intvl && window.clearInterval(this.intvl);\n  this.intvl = null;\n};\n\nObstacleSystem.prototype.tick = function () {\n  var aspectRatio = this.canvas.width / 2 / this.canvas.height,\n      height = scale(Math.random(), [0, 1], [0.2, 0.8]),\n      gap = 0.25,\n      height1 = height - gap / 2,\n      height2 = 1 - height1 - gap,\n\n      pass = this.onPassObstacle.bind(this);\n\n  this.entities.push(new Pipe(aspectRatio, height1, 'T', pass));\n  this.entities.push(new Pipe(aspectRatio, height2, 'B'));\n  this.entities.forEach((ent, i) => {\n    if (ent.components.physics.position.x < -aspectRatio - (ent.width / 2)) {\n      this.entities.splice(i, 1);\n    }\n  });\n};\n\nObstacleSystem.prototype.onPassObstacle = function () {};\n\nmodule.exports = ObstacleSystem;\n","'use strict';\n\nvar CollisionSystem = require('./collisions');\n\n/**\n * Object to update the physics parameters on each object that has them @60fps\n *\n * @class\n * @param {Array} entities all the entities in the game\n */\nvar PhysicsSystem = function PhysicsSystem(entities) {\n  this.entities = entities;\n  this.collisions = new CollisionSystem(entities);\n  this.intvl = null;\n};\n\nPhysicsSystem.prototype.run = function () {\n  this.intvl = setInterval(this.tick.bind(this), 1000 / 60);\n};\n\nPhysicsSystem.prototype.pause = function () {\n  this.intvl && clearInterval(this.intvl);\n  this.intvl = null;\n};\n\nPhysicsSystem.prototype.tick = function () {\n  this.entities.forEach((entity) => {\n    if (!entity.components || !entity.components.physics) { return; }\n    entity.components.physics.update(1 / 60);\n  });\n  this.collisions.tick();\n};\n\nmodule.exports = PhysicsSystem;\n","'use strict';\n\nvar UISystem = function UISystem() {\n  this.highScore = localStorage.getItem('ft-high-score') || 0;\n  this.endingSplashElt = document.getElementById('ft-ending-splash');\n  this.finalScoreElt = document.getElementById('ft-final-score');\n  this.highScoreElt = document.getElementById('ft-high-score');\n  this.readyButton = document.getElementById('ft-ready-button');\n  this.readySplashElt = document.getElementById('ft-ready-splash');\n  this.scoreElt = document.getElementById('ft-score');\n  this.readyButton.onclick = this.ready.bind(this);\n  this.ready();\n};\n\nUISystem.prototype.ready = function () {\n  this.endingSplashElt.style.display = 'none';\n  this.scoreElt.style.display = 'inline-block';\n  this.readySplashElt.style.display = 'inline-block';\n\n  this.score = 0;\n  this.scoreElt.textContent = '0';\n  this.isReady = true;\n  this.onReady();\n};\n\nUISystem.prototype.onReady = function () {};\n\nUISystem.prototype.start = function () {\n  this.endingSplashElt.style.display = 'none';\n  this.scoreElt.style.display = 'inline-block';\n  this.readySplashElt.style.display = 'none';\n};\n\nUISystem.prototype.reset = function () {\n  this.highScore = Math.max(this.highScore, this.score);\n  localStorage.setItem('ft-high-score', this.highScore);\n\n  this.highScoreElt.textContent = this.highScore.toString();\n  this.finalScoreElt.textContent = this.score.toString();\n\n  this.endingSplashElt.style.display = 'inline-block';\n  this.scoreElt.style.display = 'none';\n  this.readySplashElt.style.display = 'none';\n  this.isReady = false;\n};\n\nUISystem.prototype.bumpScore = function () {\n  this.scoreElt.textContent = (++this.score).toString();\n};\n\nmodule.exports = UISystem;\n"],"sourceRoot":"/source/"}